{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home kintone-js-sdk is the SDK of kintone REST API client on Node.js Getting Started Quickstart Javascript Quickstart Nodejs Reference Authentication Connection Record BulkRequest App File KintoneAPIException License MIT Copyright Copyright(c) Cybozu, Inc.","title":"Home"},{"location":"#home","text":"kintone-js-sdk is the SDK of kintone REST API client on Node.js","title":"Home"},{"location":"#getting-started","text":"Quickstart Javascript Quickstart Nodejs","title":"Getting Started"},{"location":"#reference","text":"Authentication Connection Record BulkRequest App File KintoneAPIException","title":"Reference"},{"location":"#license","text":"MIT","title":"License"},{"location":"#copyright","text":"Copyright(c) Cybozu, Inc.","title":"Copyright"},{"location":"getting-started/quickstart-browser/","text":"Quickstart Javascript Create a customization Using kintone-js-sdk.min.js file Attach a below file from './dist' folder in kintone-js-sdk into kintone app kintone-js-sdk.min.js Create index.js file (function () { kintone.events.on( app.record.detail.show , function (ev) { var conn = new kintoneJSSDK.Connection(); var app = new kintoneJSSDK.App(conn); app.getApps().then(rsp = { console.log(rsp); }).catch(err = { console.log(err.get()); }); }); }()); Attach index.js file into kintone app setting Install package from npm Step 1: Run commands $ mkdir test $ cd ./test $ mkdir src $ mkdir dist Step 2: Add the below files to test/ folder package.json file { name : use-kintone-js-sdk , version : 0.1.0 , description : , main : src/index.js , license : , author : Cybozu, Inc. , scripts : { build : webpack --mode development --watch }, repository : { type : git , url : }, directories : { doc : }, dependencies : { cross-env : ^5.1.3 kintone-js-sdk : * }, devDependencies : { @babel/core : ^7.0.0 , @babel/preset-env : ^7.0.0 , babel-loader : ^8.0.2 , webpack : ^4.17.2 , webpack-cli : ^3.1.0 } } webpack.config.js file const path = require('path'); module.exports = (env = {}) = { return { entry: { 'index.min': './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, include: [require.resolve('kintone-js-sdk')], use: { loader: 'babel-loader' }, } ] }, node: { fs: 'empty', net: 'empty', tls: 'empty' }, watch: env.watch }; }; .babelrc file { presets : [ @babel/preset-env ] } Step 3: Add the index.js file to src/ folder import {Connection, App} from 'kintone-js-sdk'; kintone.events.on( app.record.index.show , function (ev) { const conn = new Connection(); const app = new App(conn); app.getApps().then(rsp = { console.log(rsp); }).catch(err = { console.log(err.get()); }); }()); Step 4: Run belows command $ npm install $ npm run build result: * ./dist/index.min.js Attach index.min.js file into kintone app setting","title":"Quickstart Javascript"},{"location":"getting-started/quickstart-browser/#quickstart-javascript","text":"","title":"Quickstart Javascript"},{"location":"getting-started/quickstart-browser/#create-a-customization","text":"","title":"Create a customization"},{"location":"getting-started/quickstart-browser/#using-kintone-js-sdkminjs-file","text":"Attach a below file from './dist' folder in kintone-js-sdk into kintone app kintone-js-sdk.min.js Create index.js file (function () { kintone.events.on( app.record.detail.show , function (ev) { var conn = new kintoneJSSDK.Connection(); var app = new kintoneJSSDK.App(conn); app.getApps().then(rsp = { console.log(rsp); }).catch(err = { console.log(err.get()); }); }); }()); Attach index.js file into kintone app setting","title":"Using kintone-js-sdk.min.js file"},{"location":"getting-started/quickstart-browser/#install-package-from-npm","text":"Step 1: Run commands $ mkdir test $ cd ./test $ mkdir src $ mkdir dist Step 2: Add the below files to test/ folder package.json file { name : use-kintone-js-sdk , version : 0.1.0 , description : , main : src/index.js , license : , author : Cybozu, Inc. , scripts : { build : webpack --mode development --watch }, repository : { type : git , url : }, directories : { doc : }, dependencies : { cross-env : ^5.1.3 kintone-js-sdk : * }, devDependencies : { @babel/core : ^7.0.0 , @babel/preset-env : ^7.0.0 , babel-loader : ^8.0.2 , webpack : ^4.17.2 , webpack-cli : ^3.1.0 } } webpack.config.js file const path = require('path'); module.exports = (env = {}) = { return { entry: { 'index.min': './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, include: [require.resolve('kintone-js-sdk')], use: { loader: 'babel-loader' }, } ] }, node: { fs: 'empty', net: 'empty', tls: 'empty' }, watch: env.watch }; }; .babelrc file { presets : [ @babel/preset-env ] } Step 3: Add the index.js file to src/ folder import {Connection, App} from 'kintone-js-sdk'; kintone.events.on( app.record.index.show , function (ev) { const conn = new Connection(); const app = new App(conn); app.getApps().then(rsp = { console.log(rsp); }).catch(err = { console.log(err.get()); }); }()); Step 4: Run belows command $ npm install $ npm run build result: * ./dist/index.min.js Attach index.min.js file into kintone app setting","title":"Install package from npm"},{"location":"getting-started/quickstart-node/","text":"Quickstart Nodejs Requirement Node.js (Version 8.9.3 or later) npm (Version 5.5.1 or later) How to use cd your-project npm init npm install --save kintone-js-sdk Code example Get record sample Source code const kintone = require('kintone-js-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken('MY_TOKEN'); let kintoneConnection = new kintone.Connection('your.FQDN.tld', kintoneAuthWithAPIToken); let kintoneRecord = new kintone.Record(kintoneConnection); let appID = {your_app_id}; let recordID = {record_id_that_will_be_retrived}; kintoneRecord.getRecord(appID, recordID) .then((rsp) => { console.log(rsp); }) .catch((err) => { // The promise function always reject with KintoneAPIExeption console.log(err.get()); }); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' } Get record sample with Async Source code const kintone = require('kintone-js-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken('MY_TOKEN'); let kintoneConnection = new kintone.Connection('your.FQDN', kintoneAuthWithAPIToken); let kintoneRecord = new kintone.Record(kintoneConnection); let appID = {your_app_id}; let recordID = {record_id_that_will_be_retrived}; let getRecord = async () => { try { let recordResult = await kintoneRecord.getRecord(appID, recordID); console.log(recordResult); } catch (error) { // The promise function always reject with KintoneAPIExeption console.log(error.get()); } } getRecord(); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' }","title":"Quickstart Nodejs"},{"location":"getting-started/quickstart-node/#quickstart-nodejs","text":"","title":"Quickstart Nodejs"},{"location":"getting-started/quickstart-node/#requirement","text":"Node.js (Version 8.9.3 or later) npm (Version 5.5.1 or later)","title":"Requirement"},{"location":"getting-started/quickstart-node/#how-to-use","text":"cd your-project npm init npm install --save kintone-js-sdk","title":"How to use"},{"location":"getting-started/quickstart-node/#code-example","text":"Get record sample Source code const kintone = require('kintone-js-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken('MY_TOKEN'); let kintoneConnection = new kintone.Connection('your.FQDN.tld', kintoneAuthWithAPIToken); let kintoneRecord = new kintone.Record(kintoneConnection); let appID = {your_app_id}; let recordID = {record_id_that_will_be_retrived}; kintoneRecord.getRecord(appID, recordID) .then((rsp) => { console.log(rsp); }) .catch((err) => { // The promise function always reject with KintoneAPIExeption console.log(err.get()); }); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' } Get record sample with Async Source code const kintone = require('kintone-js-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken('MY_TOKEN'); let kintoneConnection = new kintone.Connection('your.FQDN', kintoneAuthWithAPIToken); let kintoneRecord = new kintone.Record(kintoneConnection); let appID = {your_app_id}; let recordID = {record_id_that_will_be_retrived}; let getRecord = async () => { try { let recordResult = await kintoneRecord.getRecord(appID, recordID); console.log(recordResult); } catch (error) { // The promise function always reject with KintoneAPIExeption console.log(error.get()); } } getRecord(); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' }","title":"Code example"},{"location":"reference/app/","text":"App Gets general information of an App, including the name, description, related Space, creator and updater information. Permissions to view the App is needed. API Tokens cannot be used with this API. Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init app sample Javascript var kintoneApp = new kintoneJSSDK.App(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneApp = new kintone.App(connection); Methods getApp(appId) Get single app Parameter Name Type Required Description appId Integer yes The kintone app ID Return Promise Sample code Get app sample Javascript var appId = {your_app_id}; kintoneApp.getApp(appId).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appId = 'your_app_id'; kintoneApp.getApp(appId).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getApps(offset, limit) Get multiple apps Parameter Name Type Required Description offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getApps(offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getApps(offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getAppsByIDs(ids, offset, limit) Get multiple apps by list of ids Parameter Name Type Required Description ids Array Integer> yes The array of app ids offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var appIDs = [{YOUR_APP_ID_1}, {YOUR_APP_ID_2}, {YOUR_APP_ID_n}]; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsByIDs(appIDs, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appIDs = ['YOUR_APP_ID_1', 'YOUR_APP_ID_2', 'YOUR_APP_ID_n']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByIDs(appIDs, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getAppsByCodes(codes, offset, limit) Get multiple apps by a list of codes name Parameter Name Type Required Description codes Array String> yes The array of app codes offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsByCodes(codes, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByCodes(codes, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getAppsByName(name, offset, limit) Get multiple apps by name Parameter Name Type Required Description name String yes The app name offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var name = 'your app name'; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsByName(name, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const name = 'your app name'; const limit = /*{your_limit_number}*/; const offset = /*{your_offset_number}*/; kintoneApp.getAppsByName(name, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getAppsBySpaceIDs(spaceIds, offset, limit) Get multiple apps by list of space's ids Parameter Name Type Required Description spaceIds Array Integer> yes The array of space ids offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var spaceIds = []; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsBySpaceIDs(spaceIds, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const spaceIds = []; const limit = /*{your_limit_number}*/; const offset = /*{your_offset_number}*/; kintoneApp.getAppsBySpaceIDs(spaceIds, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); addPreviewApp(name, space, thread) Creates a preview App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description name String yes The App name. The maximum length is 64 characters. space Integer (optional) The Space ID of where the App will be created. thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise Sample code Add preview App sample Javascript var name = {your_app_name}; var space = {space_of_app}; var thread = {thread_id_in_space}; kintoneApp.addPreviewApp(name, space, thread).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const name = {your_app_name}; const space = {space_of_app}; const thread = {thread_id_in_space}; kintoneApp.addPreviewApp(name, space, thread).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); deployAppSettings(apps, revert) Updates the settings of a pre-live App to the live App. Parameter Name Type Required Description apps Array JSONObject> yes The list of preview apps. revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise Sample code Deploy app settings sample Javascript var appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; var apps = [ appPreview // Another app preview here ]; var revert = false; kintoneApp.deployAppSettings(apps, revert).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; const apps = [ appPreview // Another app preview here ]; const revert = false; kintoneApp.deployAppSettings(apps, revert).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getAppDeployStatus(apps) Gets the deployment status of the App settings for multiple Apps. Parameter Name Type Required Description apps Array Integer> yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise Sample code Get app deploy status sample Javascript var appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; var apps = [ 'your_app_id' // Another app id here ]; kintoneApp.getAppDeployStatus(apps).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; const apps = [ 'your_app_id' // Another app id here ]; kintoneApp.getAppDeployStatus(apps).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getViews(app, lang, isPreview) Gets the View settings of a an App. Parameter Name Type Required Description app Integer yes The app ID lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the views with a pre-live settings . Return Promise Sample code Get views sample Javascript var app = {your_app_id}; var lang = {language_code}; // Ex: JA kintoneApp.getViews(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) views var app = {your_app_id}; var lang = {language_code}; // Ex: JA var isPreview = true; kintoneApp.getViews(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const lang = {language_code}; // Ex: JA kintoneApp.getViews(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) views const app = {your_app_id}; const lang = {language_code}; // Ex: JA const isPreview = true; kintoneApp.getViews(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateViews(app, views, revision) Get field of form in kintone app Parameter Name Type Required Description app Integer yes The app ID views JSONObject yes An object of data of Views. About the format, please look the sample below or reference at the end of this page revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update views sample Javascript var app = {your_app_id}; var views = { 'Your_view_name': { 'index': 0, 'type': 'your_view_type', // Default: 'LIST', 'CALENDAR', 'CUSTOM' 'name': 'Your_view_name', 'fields': [ 'your_field_code' // Another field code here ], 'filterCond': 'your_query', 'sort': 'your_sort' } // Another view here }; var revision = 'settings_revision'; kintoneApp.updateViews(app, views, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const views = { \"Your_view_name\": { \"index\": 0, \"type\": \"your_view_type\", // Default: 'LIST', 'CALENDAR', 'CUSTOM' \"name\": \"Your_view_name\", \"fields\": [ \"your_field_code\" // Another field code here ], \"filterCond\": \"your_query\", \"sort\": \"your_sort\" } // Another view here }; const revision: 'settings_revision'; kintoneApp.updateViews(app, views, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getGeneralSettings(app, lang, isPreview) Gets the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description app Integer yes The app ID lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the general with a pre-live settings . Return Promise Sample code Get general settings sample Javascript var app = {your_app_id}; var lang = {language_code}; // Ex: JA kintoneApp.getGeneralSettings(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) general settings var app = {your_app_id}; var lang = {language_code}; // Ex: JA var isPreview = true; kintoneApp.getGeneralSettings(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const lang = {language_code}; // Ex: JA kintoneApp.getGeneralSettings(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) general settings const app = {your_app_id}; const lang = {language_code}; // Ex: JA const isPreview = true; kintoneApp.getGeneralSettings(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateGeneralSettings(app, generalSettings, revision) Update the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description app Integer yes The app ID generalSettings JSONObject (Conditional) the description, name, icon, revision and color theme of an App. revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update general settings sample Javascript var app = {your_app_id}; var generalSettings = { 'name': 'APP_NAME', 'description': 'Here is app description.', 'icon': { 'type': 'icon_type', // specified: FILE, PRESET 'key': 'icon_key' }, 'theme': 'your_theme' // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK }; var revision = 'settings_revision'; kintoneApp.updateGeneralSettings(app, generalSettings, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const generalSettings = { 'name': 'APP_NAME', 'description': 'Here is app description.', 'icon': { 'type': 'icon_type', // specified: FILE, PRESET 'key': 'icon_key' }, 'theme': 'your_theme' // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK }; const revision = 'settings_revision'; kintoneApp.updateGeneralSettings(app, generalSettings, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getFormFields(app, lang, isPreview) Get field of form in kintone app Parameter Name Type Required Description app Integer yes The app ID lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise Sample code Get app form field sample Javascript var app = {your_app_id}; var lang = {language_code}; // Ex: JA kintoneApp.getFormFields(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) form fields var app = {your_app_id}; var lang = {language_code}; // Ex: JA var isPreview = true; kintoneApp.getFormFields(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const lang = {language_code}; // Ex: JA kintoneApp.getFormFields(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) form fields const app = {your_app_id}; const lang = {language_code}; // Ex: JA const isPreview = true; kintoneApp.getFormFields(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); addFormFields(app, fields, revision) Adds fields to a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The app ID fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Add app form field sample Javascript var app = {your_app_id}; var fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'the_revision_of_the_settings '; kintoneApp.addFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.addFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateFormFields(app, fields, revision) Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The app ID fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update app form field sample Javascript var app = {your_app_id}; var fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); deleteFormFields(app, fields, revision) Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The app ID fields Array String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Delete app form field sample Javascript var app = {your_app_id}; var fields = [ 'your_field_cde' // Another field code here ]; var revision = 'revision_of_the_Settings '; kintoneApp.deleteFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fields = [ 'your_field_cde' // Another field code here ]; const revision = 'revision_of_the_Settings '; kintoneApp.deleteFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getFormLayout(app, isPreview) Get layout of form in kintone app Parameter Name Type Required Description app Integer yes The kintone app id isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise Sample code Get form layout sample Javascript var app = {your_app_id}; // Get form layout kintoneApp.getFormLayout(app).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a preview (pre-live) form layout var isPreview = true; kintoneApp.getFormLayout(app, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; // Get form layout kintoneApp.getFormLayout(app).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a preview (pre-live) form layout const isPreview = true; kintoneApp.getFormLayout(app, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateFormLayout(app, layout, revision) Updates the field layout info of a form in an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The kintone app id layout Array JSONObject> yes A list of field layouts for each row. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. Return Promise Sample code Update form layout sample Javascript var app = {your_app_id}; var fisrtRowLayout = { 'type': 'kintone_layout_type', 'fields': [ { 'type': 'kintone_field_type', 'code': 'your_field_code', 'size': { 'width': 'your_field_width' } } ] }; var layout = [ fisrtRowLayout // Another row layout here ]; var revision = 'settings_revision'; // Update form layout kintoneApp.updateFormLayout(app, layout, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fisrtRowLayout = { 'type': 'kintone_layout_type', 'fields': [ { 'type': 'kintone_field_type', 'code': 'your_field_code', 'size': { 'width': 'your_field_width' } } ] }; const layout = [ fisrtRowLayout // Another row layout here ]; const revision = 'settings_revision'; // Update form layout kintoneApp.updateFormLayout(app, layout, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Reference Get App on developer network Get Apps on developer network Get Form fields on developer network Get Form Layout on developer network","title":"App"},{"location":"reference/app/#app","text":"Gets general information of an App, including the name, description, related Space, creator and updater information. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"App"},{"location":"reference/app/#constructor","text":"Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init app sample Javascript var kintoneApp = new kintoneJSSDK.App(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneApp = new kintone.App(connection);","title":"Constructor"},{"location":"reference/app/#methods","text":"","title":"Methods"},{"location":"reference/app/#getappappid","text":"Get single app Parameter Name Type Required Description appId Integer yes The kintone app ID Return Promise Sample code Get app sample Javascript var appId = {your_app_id}; kintoneApp.getApp(appId).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appId = 'your_app_id'; kintoneApp.getApp(appId).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getApp(appId)"},{"location":"reference/app/#getappsoffset-limit","text":"Get multiple apps Parameter Name Type Required Description offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getApps(offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getApps(offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getApps(offset, limit)"},{"location":"reference/app/#getappsbyidsids-offset-limit","text":"Get multiple apps by list of ids Parameter Name Type Required Description ids Array Integer> yes The array of app ids offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var appIDs = [{YOUR_APP_ID_1}, {YOUR_APP_ID_2}, {YOUR_APP_ID_n}]; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsByIDs(appIDs, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appIDs = ['YOUR_APP_ID_1', 'YOUR_APP_ID_2', 'YOUR_APP_ID_n']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByIDs(appIDs, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getAppsByIDs(ids, offset, limit)"},{"location":"reference/app/#getappsbycodescodes-offset-limit","text":"Get multiple apps by a list of codes name Parameter Name Type Required Description codes Array String> yes The array of app codes offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsByCodes(codes, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByCodes(codes, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getAppsByCodes(codes, offset, limit)"},{"location":"reference/app/#getappsbynamename-offset-limit","text":"Get multiple apps by name Parameter Name Type Required Description name String yes The app name offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var name = 'your app name'; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsByName(name, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const name = 'your app name'; const limit = /*{your_limit_number}*/; const offset = /*{your_offset_number}*/; kintoneApp.getAppsByName(name, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getAppsByName(name, offset, limit)"},{"location":"reference/app/#getappsbyspaceidsspaceids-offset-limit","text":"Get multiple apps by list of space's ids Parameter Name Type Required Description spaceIds Array Integer> yes The array of space ids offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var spaceIds = []; var limit = {your_limit_number}; var offset = {your_offset_number}; kintoneApp.getAppsBySpaceIDs(spaceIds, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const spaceIds = []; const limit = /*{your_limit_number}*/; const offset = /*{your_offset_number}*/; kintoneApp.getAppsBySpaceIDs(spaceIds, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getAppsBySpaceIDs(spaceIds, offset, limit)"},{"location":"reference/app/#addpreviewappname-space-thread","text":"Creates a preview App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description name String yes The App name. The maximum length is 64 characters. space Integer (optional) The Space ID of where the App will be created. thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise Sample code Add preview App sample Javascript var name = {your_app_name}; var space = {space_of_app}; var thread = {thread_id_in_space}; kintoneApp.addPreviewApp(name, space, thread).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const name = {your_app_name}; const space = {space_of_app}; const thread = {thread_id_in_space}; kintoneApp.addPreviewApp(name, space, thread).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"addPreviewApp(name, space, thread)"},{"location":"reference/app/#deployappsettingsapps-revert","text":"Updates the settings of a pre-live App to the live App. Parameter Name Type Required Description apps Array JSONObject> yes The list of preview apps. revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise Sample code Deploy app settings sample Javascript var appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; var apps = [ appPreview // Another app preview here ]; var revert = false; kintoneApp.deployAppSettings(apps, revert).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; const apps = [ appPreview // Another app preview here ]; const revert = false; kintoneApp.deployAppSettings(apps, revert).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"deployAppSettings(apps, revert)"},{"location":"reference/app/#getappdeploystatusapps","text":"Gets the deployment status of the App settings for multiple Apps. Parameter Name Type Required Description apps Array Integer> yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise Sample code Get app deploy status sample Javascript var appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; var apps = [ 'your_app_id' // Another app id here ]; kintoneApp.getAppDeployStatus(apps).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const appPreview = { app: 'your_app_id', revision: 'revision_of_app' }; const apps = [ 'your_app_id' // Another app id here ]; kintoneApp.getAppDeployStatus(apps).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getAppDeployStatus(apps)"},{"location":"reference/app/#getviewsapp-lang-ispreview","text":"Gets the View settings of a an App. Parameter Name Type Required Description app Integer yes The app ID lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the views with a pre-live settings . Return Promise Sample code Get views sample Javascript var app = {your_app_id}; var lang = {language_code}; // Ex: JA kintoneApp.getViews(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) views var app = {your_app_id}; var lang = {language_code}; // Ex: JA var isPreview = true; kintoneApp.getViews(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const lang = {language_code}; // Ex: JA kintoneApp.getViews(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) views const app = {your_app_id}; const lang = {language_code}; // Ex: JA const isPreview = true; kintoneApp.getViews(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getViews(app, lang, isPreview)"},{"location":"reference/app/#updateviewsapp-views-revision","text":"Get field of form in kintone app Parameter Name Type Required Description app Integer yes The app ID views JSONObject yes An object of data of Views. About the format, please look the sample below or reference at the end of this page revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update views sample Javascript var app = {your_app_id}; var views = { 'Your_view_name': { 'index': 0, 'type': 'your_view_type', // Default: 'LIST', 'CALENDAR', 'CUSTOM' 'name': 'Your_view_name', 'fields': [ 'your_field_code' // Another field code here ], 'filterCond': 'your_query', 'sort': 'your_sort' } // Another view here }; var revision = 'settings_revision'; kintoneApp.updateViews(app, views, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const views = { \"Your_view_name\": { \"index\": 0, \"type\": \"your_view_type\", // Default: 'LIST', 'CALENDAR', 'CUSTOM' \"name\": \"Your_view_name\", \"fields\": [ \"your_field_code\" // Another field code here ], \"filterCond\": \"your_query\", \"sort\": \"your_sort\" } // Another view here }; const revision: 'settings_revision'; kintoneApp.updateViews(app, views, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateViews(app, views, revision)"},{"location":"reference/app/#getgeneralsettingsapp-lang-ispreview","text":"Gets the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description app Integer yes The app ID lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the general with a pre-live settings . Return Promise Sample code Get general settings sample Javascript var app = {your_app_id}; var lang = {language_code}; // Ex: JA kintoneApp.getGeneralSettings(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) general settings var app = {your_app_id}; var lang = {language_code}; // Ex: JA var isPreview = true; kintoneApp.getGeneralSettings(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const lang = {language_code}; // Ex: JA kintoneApp.getGeneralSettings(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) general settings const app = {your_app_id}; const lang = {language_code}; // Ex: JA const isPreview = true; kintoneApp.getGeneralSettings(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getGeneralSettings(app, lang, isPreview)"},{"location":"reference/app/#updategeneralsettingsapp-generalsettings-revision","text":"Update the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description app Integer yes The app ID generalSettings JSONObject (Conditional) the description, name, icon, revision and color theme of an App. revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update general settings sample Javascript var app = {your_app_id}; var generalSettings = { 'name': 'APP_NAME', 'description': 'Here is app description.', 'icon': { 'type': 'icon_type', // specified: FILE, PRESET 'key': 'icon_key' }, 'theme': 'your_theme' // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK }; var revision = 'settings_revision'; kintoneApp.updateGeneralSettings(app, generalSettings, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const generalSettings = { 'name': 'APP_NAME', 'description': 'Here is app description.', 'icon': { 'type': 'icon_type', // specified: FILE, PRESET 'key': 'icon_key' }, 'theme': 'your_theme' // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK }; const revision = 'settings_revision'; kintoneApp.updateGeneralSettings(app, generalSettings, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateGeneralSettings(app, generalSettings, revision)"},{"location":"reference/app/#getformfieldsapp-lang-ispreview","text":"Get field of form in kintone app Parameter Name Type Required Description app Integer yes The app ID lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise Sample code Get app form field sample Javascript var app = {your_app_id}; var lang = {language_code}; // Ex: JA kintoneApp.getFormFields(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) form fields var app = {your_app_id}; var lang = {language_code}; // Ex: JA var isPreview = true; kintoneApp.getFormFields(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const lang = {language_code}; // Ex: JA kintoneApp.getFormFields(app, lang).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a pre-live (preview) form fields const app = {your_app_id}; const lang = {language_code}; // Ex: JA const isPreview = true; kintoneApp.getFormFields(app, lang, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getFormFields(app, lang, isPreview)"},{"location":"reference/app/#addformfieldsapp-fields-revision","text":"Adds fields to a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The app ID fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Add app form field sample Javascript var app = {your_app_id}; var fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'the_revision_of_the_settings '; kintoneApp.addFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.addFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"addFormFields(app, fields, revision)"},{"location":"reference/app/#updateformfieldsapp-fields-revision","text":"Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The app ID fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update app form field sample Javascript var app = {your_app_id}; var fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateFormFields(app, fields, revision)"},{"location":"reference/app/#deleteformfieldsapp-fields-revision","text":"Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The app ID fields Array String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Delete app form field sample Javascript var app = {your_app_id}; var fields = [ 'your_field_cde' // Another field code here ]; var revision = 'revision_of_the_Settings '; kintoneApp.deleteFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fields = [ 'your_field_cde' // Another field code here ]; const revision = 'revision_of_the_Settings '; kintoneApp.deleteFormFields(app, fields, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"deleteFormFields(app, fields, revision)"},{"location":"reference/app/#getformlayoutapp-ispreview","text":"Get layout of form in kintone app Parameter Name Type Required Description app Integer yes The kintone app id isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise Sample code Get form layout sample Javascript var app = {your_app_id}; // Get form layout kintoneApp.getFormLayout(app).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a preview (pre-live) form layout var isPreview = true; kintoneApp.getFormLayout(app, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; // Get form layout kintoneApp.getFormLayout(app).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); // Get a preview (pre-live) form layout const isPreview = true; kintoneApp.getFormLayout(app, isPreview).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getFormLayout(app, isPreview)"},{"location":"reference/app/#updateformlayoutapp-layout-revision","text":"Updates the field layout info of a form in an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description app Integer yes The kintone app id layout Array JSONObject> yes A list of field layouts for each row. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. Return Promise Sample code Update form layout sample Javascript var app = {your_app_id}; var fisrtRowLayout = { 'type': 'kintone_layout_type', 'fields': [ { 'type': 'kintone_field_type', 'code': 'your_field_code', 'size': { 'width': 'your_field_width' } } ] }; var layout = [ fisrtRowLayout // Another row layout here ]; var revision = 'settings_revision'; // Update form layout kintoneApp.updateFormLayout(app, layout, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = {your_app_id}; const fisrtRowLayout = { 'type': 'kintone_layout_type', 'fields': [ { 'type': 'kintone_field_type', 'code': 'your_field_code', 'size': { 'width': 'your_field_width' } } ] }; const layout = [ fisrtRowLayout // Another row layout here ]; const revision = 'settings_revision'; // Update form layout kintoneApp.updateFormLayout(app, layout, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateFormLayout(app, layout, revision)"},{"location":"reference/app/#reference","text":"Get App on developer network Get Apps on developer network Get Form fields on developer network Get Form Layout on developer network","title":"Reference"},{"location":"reference/authentication/","text":"Authentication Authentication module will be used by Connection . This module allow we authenticate with kintone app by password authenticator or API token authenticator. This module is also support basic authenticator. Warning If both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used. Constructor Parameter (none) Sample code Init authentication module Javascript var kintoneAuth = new kintoneJSSDK.Auth(); Nodejs const kintone = require('kintone-js-sdk'); let kintoneAuth = new kintone.Auth(); Methods setPasswordAuth(username, password) Set password authentication for Authentication module. Parameter Name Type Required Description username String yes The username that is able to authenticate on kintone app password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set password authentication Javascript var username = '{your_user_name}'; var password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password); Nodejs let username = '{your_user_name}'; let password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password); setApiToken(apiToken) Set Api Token for Authentication module. Parameter Name Type Required Description apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication Javascript var apiToken = '{your_token}'; kintoneAuth.setApiToken(apiToken); Nodejs let apiTokenString = '{your_token}'; kintoneAuth.setApiToken(apiTokenString); setBasicAuth(username, password) Set Basic authentication for Authentication module. Parameter Name Type Required Description username String yes The username that is able to authenticate on kintone app password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set basic authentication Javascript var username = '{your_user_name}'; var password = '{your_password}'; kintoneAuth.setBasicAuth(username, password); Nodejs let username = '{your_user_name}'; let password = '{your_password}'; kintoneAuth.setBasicAuth(username, password);","title":"Authentication"},{"location":"reference/authentication/#authentication","text":"Authentication module will be used by Connection . This module allow we authenticate with kintone app by password authenticator or API token authenticator. This module is also support basic authenticator. Warning If both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used.","title":"Authentication"},{"location":"reference/authentication/#constructor","text":"Parameter (none) Sample code Init authentication module Javascript var kintoneAuth = new kintoneJSSDK.Auth(); Nodejs const kintone = require('kintone-js-sdk'); let kintoneAuth = new kintone.Auth();","title":"Constructor"},{"location":"reference/authentication/#methods","text":"","title":"Methods"},{"location":"reference/authentication/#setpasswordauthusername-password","text":"Set password authentication for Authentication module. Parameter Name Type Required Description username String yes The username that is able to authenticate on kintone app password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set password authentication Javascript var username = '{your_user_name}'; var password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password); Nodejs let username = '{your_user_name}'; let password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password);","title":"setPasswordAuth(username, password)"},{"location":"reference/authentication/#setapitokenapitoken","text":"Set Api Token for Authentication module. Parameter Name Type Required Description apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication Javascript var apiToken = '{your_token}'; kintoneAuth.setApiToken(apiToken); Nodejs let apiTokenString = '{your_token}'; kintoneAuth.setApiToken(apiTokenString);","title":"setApiToken(apiToken)"},{"location":"reference/authentication/#setbasicauthusername-password","text":"Set Basic authentication for Authentication module. Parameter Name Type Required Description username String yes The username that is able to authenticate on kintone app password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set basic authentication Javascript var username = '{your_user_name}'; var password = '{your_password}'; kintoneAuth.setBasicAuth(username, password); Nodejs let username = '{your_user_name}'; let password = '{your_password}'; kintoneAuth.setBasicAuth(username, password);","title":"setBasicAuth(username, password)"},{"location":"reference/bulk-request/","text":"Bulk Request The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init bulk request module Javascript var kintoneBulkRequest = new kintoneJSSDK.BulkRequest(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneBulkRequest = new kintone.BulkRequest(connection); Methods All below methods (excluded execute() method) will add request to queue, you must execute the execute() function to get result of BulkRequest. addRecord(app, record) Parameter See at Record - addRecord Return BulkRequest addRecords(app, records) Parameter See at Record - addRecords Return BulkRequest updateRecordByID(app, id, record, revision) Parameter See at Record - updateRecordByID Return BulkRequest updateRecordByUpdateKey(app, updateKey, record, revision) Parameter See at Record - updateRecordByUpdateKey Return BulkRequest updateRecords(app, records) Parameter See at Record - updateRecords Return BulkRequest deleteRecords(app, ids) Parameter See at Record - deleteRecords Return BulkRequest deleteRecordsWithRevision(app, idsWithRevision) Parameter See at Record - deleteRecordsWithRevision Return BulkRequest updateRecordAssignees(app, record, assignees, revision) Parameter See at Record - updateRecordAssignees Return BulkRequest updateRecordStatus(app, id, action, assignee, revision) Parameter See at Record - updateRecordStatus Return BulkRequest updateRecordsStatus(app, records) Parameter See at Record - updateRecordsStatus Return BulkRequest execute() Execute the bulk request and get data response Parameter (none) Return [Promise] Sample code Execute bulk request Javascript var responseBulkRequest = kintoneBulkRequest .addRecord(/*[Args]*/) .addRecords(/*[Args]*/) .updateRecords(/*[Args]*/) .deleteRecords() .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { // write error to console console.log(err.get()); // Throw error err.throw(); }); Nodejs const responseBulkRequest = kintoneBulkRequest .addRecord(/* [Args]*/) .addRecords(/* [Args]*/) .updateRecords(/* [Args]*/) .deleteRecords() .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { // write error to console console.log(err.get()); // Throw error err.throw(); }); Reference Get Record on developer network","title":"Bulk Request"},{"location":"reference/bulk-request/#bulk-request","text":"The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees","title":"Bulk Request"},{"location":"reference/bulk-request/#constructor","text":"","title":"Constructor"},{"location":"reference/bulk-request/#parameter","text":"Name Type Required Description connection Connection yes The connection module of this SDK.","title":"Parameter"},{"location":"reference/bulk-request/#sample-code","text":"Init bulk request module Javascript var kintoneBulkRequest = new kintoneJSSDK.BulkRequest(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneBulkRequest = new kintone.BulkRequest(connection);","title":"Sample code"},{"location":"reference/bulk-request/#methods","text":"All below methods (excluded execute() method) will add request to queue, you must execute the execute() function to get result of BulkRequest.","title":"Methods"},{"location":"reference/bulk-request/#addrecordapp-record","text":"Parameter See at Record - addRecord Return BulkRequest","title":"addRecord(app, record)"},{"location":"reference/bulk-request/#addrecordsapp-records","text":"Parameter See at Record - addRecords Return BulkRequest","title":"addRecords(app, records)"},{"location":"reference/bulk-request/#updaterecordbyidapp-id-record-revision","text":"Parameter See at Record - updateRecordByID Return BulkRequest","title":"updateRecordByID(app, id, record, revision)"},{"location":"reference/bulk-request/#updaterecordbyupdatekeyapp-updatekey-record-revision","text":"Parameter See at Record - updateRecordByUpdateKey Return BulkRequest","title":"updateRecordByUpdateKey(app, updateKey, record, revision)"},{"location":"reference/bulk-request/#updaterecordsapp-records","text":"Parameter See at Record - updateRecords Return BulkRequest","title":"updateRecords(app, records)"},{"location":"reference/bulk-request/#deleterecordsapp-ids","text":"Parameter See at Record - deleteRecords Return BulkRequest","title":"deleteRecords(app, ids)"},{"location":"reference/bulk-request/#deleterecordswithrevisionapp-idswithrevision","text":"Parameter See at Record - deleteRecordsWithRevision Return BulkRequest","title":"deleteRecordsWithRevision(app, idsWithRevision)"},{"location":"reference/bulk-request/#updaterecordassigneesapp-record-assignees-revision","text":"Parameter See at Record - updateRecordAssignees Return BulkRequest","title":"updateRecordAssignees(app, record, assignees, revision)"},{"location":"reference/bulk-request/#updaterecordstatusapp-id-action-assignee-revision","text":"Parameter See at Record - updateRecordStatus Return BulkRequest","title":"updateRecordStatus(app, id, action, assignee, revision)"},{"location":"reference/bulk-request/#updaterecordsstatusapp-records","text":"Parameter See at Record - updateRecordsStatus Return BulkRequest","title":"updateRecordsStatus(app, records)"},{"location":"reference/bulk-request/#execute","text":"Execute the bulk request and get data response Parameter (none) Return [Promise] Sample code Execute bulk request Javascript var responseBulkRequest = kintoneBulkRequest .addRecord(/*[Args]*/) .addRecords(/*[Args]*/) .updateRecords(/*[Args]*/) .deleteRecords() .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { // write error to console console.log(err.get()); // Throw error err.throw(); }); Nodejs const responseBulkRequest = kintoneBulkRequest .addRecord(/* [Args]*/) .addRecords(/* [Args]*/) .updateRecords(/* [Args]*/) .deleteRecords() .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { // write error to console console.log(err.get()); // Throw error err.throw(); });","title":"execute()"},{"location":"reference/bulk-request/#reference","text":"Get Record on developer network","title":"Reference"},{"location":"reference/connection/","text":"Connection Connection module will used as a connector to connect to kintone Rest API This module excute the request process by axios npm. Constructor Parameter Name Type Required Description domain String (condition) Required for nodejs The domain that is able to authenticate on kintone app auth Auth (condition) Required for nodejs The authentication object. guestSpaceID Integer (optional) The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module Javascript // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var username = '{your_user_name}'; var password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password); // Define connection that included auth var kintoneConnection = new kintoneJSSDK.Connection( kintoneAuth); // Define connection that included guest space var guestSpaceID = '{guest_Space_ID}'; var kintoneConnectionWithGuestSpaceDemo = new kintoneJSSDK.Connection(kintoneAuth, guestSpaceID); // Define connection without auth var guestSpaceID = '{guest_Space_ID}'; var kintoneConnectionWithGuestSpaceDemo = new kintoneJSSDK.Connection(null, guestSpaceID); Nodejs const kintone = require('kintone-js-sdk'); // Define Authentication object let kintoneAuth = new kintone.Auth(); let username = '{your_user_name}'; let password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password); let myDomainName = 'my.domain.tld'; let kintoneConnection = new kintone.Connection(myDomainName, kintoneAuth); // Define connection that included guest space let guestSpaceID = /*{guestSpaceID}*/; let kintoneConnectionWithGuestSpaceDemo = new kintone.Connection(myDomainName, kintoneAuth, guestSpaceID); Methods setHeader(key, value) Set new header of the Connection Parameter Name Type Required Description key String yes The header's key name value String yes The header's value of key Return Connection Sample code Set header of the Connection Javascript var key = '{your_header_key}'; var value = '{your_header_value}'; kintoneConnection.setHeader(key, value); Nodejs let key = '{your_header_key}'; let value = '{your_header_value}'; kintoneConnection.setHeader(key, value); addRequestOption(key, value) Add option that supported by axios option Parameter Name Type Required Description key String yes The option's key name value String yes The option's value of key Return Connection Sample code Set header of the Connection Javascript var key = '{your_option_key}'; var value = '{your_option_value}'; kintoneConnection.addRequestOption(key, value); Nodejs let key = '{your_option_key}'; let value = '{your_option_value}'; kintoneConnection.addRequestOption(key, value); setProxy(proxyHost, proxyPort) Set the proxy for the axios option Parameter Name Type Required Description proxyHost String yes The proxy host name proxyPort String yes The proxy port number Return Connection Sample code Set proxy for the Connection Javascript var proxyHost = '{your_proxy_host}'; var proxyPort = '{your_proxy_post}'; kintoneConnection.setProxy(proxyHost, proxyPort); Nodejs const proxyHost = '{your_proxy_host}'; const proxyPort = '{your_proxy_post}'; kintoneConnection.setProxy(proxyHost, proxyPort);","title":"Connection"},{"location":"reference/connection/#connection","text":"Connection module will used as a connector to connect to kintone Rest API This module excute the request process by axios npm.","title":"Connection"},{"location":"reference/connection/#constructor","text":"Parameter Name Type Required Description domain String (condition) Required for nodejs The domain that is able to authenticate on kintone app auth Auth (condition) Required for nodejs The authentication object. guestSpaceID Integer (optional) The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module Javascript // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var username = '{your_user_name}'; var password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password); // Define connection that included auth var kintoneConnection = new kintoneJSSDK.Connection( kintoneAuth); // Define connection that included guest space var guestSpaceID = '{guest_Space_ID}'; var kintoneConnectionWithGuestSpaceDemo = new kintoneJSSDK.Connection(kintoneAuth, guestSpaceID); // Define connection without auth var guestSpaceID = '{guest_Space_ID}'; var kintoneConnectionWithGuestSpaceDemo = new kintoneJSSDK.Connection(null, guestSpaceID); Nodejs const kintone = require('kintone-js-sdk'); // Define Authentication object let kintoneAuth = new kintone.Auth(); let username = '{your_user_name}'; let password = '{your_password}'; kintoneAuth.setPasswordAuth(username, password); let myDomainName = 'my.domain.tld'; let kintoneConnection = new kintone.Connection(myDomainName, kintoneAuth); // Define connection that included guest space let guestSpaceID = /*{guestSpaceID}*/; let kintoneConnectionWithGuestSpaceDemo = new kintone.Connection(myDomainName, kintoneAuth, guestSpaceID);","title":"Constructor"},{"location":"reference/connection/#methods","text":"","title":"Methods"},{"location":"reference/connection/#setheaderkey-value","text":"Set new header of the Connection Parameter Name Type Required Description key String yes The header's key name value String yes The header's value of key Return Connection Sample code Set header of the Connection Javascript var key = '{your_header_key}'; var value = '{your_header_value}'; kintoneConnection.setHeader(key, value); Nodejs let key = '{your_header_key}'; let value = '{your_header_value}'; kintoneConnection.setHeader(key, value);","title":"setHeader(key, value)"},{"location":"reference/connection/#addrequestoptionkey-value","text":"Add option that supported by axios option Parameter Name Type Required Description key String yes The option's key name value String yes The option's value of key Return Connection Sample code Set header of the Connection Javascript var key = '{your_option_key}'; var value = '{your_option_value}'; kintoneConnection.addRequestOption(key, value); Nodejs let key = '{your_option_key}'; let value = '{your_option_value}'; kintoneConnection.addRequestOption(key, value);","title":"addRequestOption(key, value)"},{"location":"reference/connection/#setproxyproxyhost-proxyport","text":"Set the proxy for the axios option Parameter Name Type Required Description proxyHost String yes The proxy host name proxyPort String yes The proxy port number Return Connection Sample code Set proxy for the Connection Javascript var proxyHost = '{your_proxy_host}'; var proxyPort = '{your_proxy_post}'; kintoneConnection.setProxy(proxyHost, proxyPort); Nodejs const proxyHost = '{your_proxy_host}'; const proxyPort = '{your_proxy_post}'; kintoneConnection.setProxy(proxyHost, proxyPort);","title":"setProxy(proxyHost, proxyPort)"},{"location":"reference/file/","text":"File Download and upload file via kintone Rest API. Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init app sample Javascript var kintoneFile = new kintoneJSSDK.File(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneFile = new kintone.File(connection); Methods upload(fileName, fileBlob) Upload file into kintone Parameter Name Type Required Description fileName String yes The name of file fileBlob Blob yes This param only use for Javascript The content of file fileContent Stream yes This param only use for Nodejs The content of file Return Promise Sample code Upload file sample Javascript var fileBlob = 'your_file_blob'; var fileName = 'your_file_name'; kintoneFile.upload(fileName, fileBlob).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const fileContent = fs.createReadStream('./cd.png'); const fileName = path.basename('./cd.png'); kintoneFile.upload(fileName, fileContent).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); download(fileKey, outPutFilePath) Download file from kintone Parameter Name Type Required Description fileKey String yes The file key of the uploaded file on kintone. outPutFilePath String yes This param only use for Nodejs The full path of output file on your environment Return Promise Sample code Get apps sample Javascript var fileKey = 'your_file_Key'; kintoneFile.download(fileKey).then(rsp => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const fileKey = 'your_file_Key'; const outPutFilePath = 'your_output_directory'; kintoneFile.download(fileKey, outPutFilePath).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Reference Upload File on developer network Download File on developer network","title":"File"},{"location":"reference/file/#file","text":"Download and upload file via kintone Rest API.","title":"File"},{"location":"reference/file/#constructor","text":"Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init app sample Javascript var kintoneFile = new kintoneJSSDK.File(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneFile = new kintone.File(connection);","title":"Constructor"},{"location":"reference/file/#methods","text":"","title":"Methods"},{"location":"reference/file/#uploadfilename-fileblob","text":"Upload file into kintone Parameter Name Type Required Description fileName String yes The name of file fileBlob Blob yes This param only use for Javascript The content of file fileContent Stream yes This param only use for Nodejs The content of file Return Promise Sample code Upload file sample Javascript var fileBlob = 'your_file_blob'; var fileName = 'your_file_name'; kintoneFile.upload(fileName, fileBlob).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const fileContent = fs.createReadStream('./cd.png'); const fileName = path.basename('./cd.png'); kintoneFile.upload(fileName, fileContent).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"upload(fileName, fileBlob)"},{"location":"reference/file/#downloadfilekey-outputfilepath","text":"Download file from kintone Parameter Name Type Required Description fileKey String yes The file key of the uploaded file on kintone. outPutFilePath String yes This param only use for Nodejs The full path of output file on your environment Return Promise Sample code Get apps sample Javascript var fileKey = 'your_file_Key'; kintoneFile.download(fileKey).then(rsp => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const fileKey = 'your_file_Key'; const outPutFilePath = 'your_output_directory'; kintoneFile.download(fileKey, outPutFilePath).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"download(fileKey, outPutFilePath)"},{"location":"reference/file/#reference","text":"Upload File on developer network Download File on developer network","title":"Reference"},{"location":"reference/kintone-api-exception/","text":"kintoneAPIException Handle error responses from kintone Rest API Methods get() Parameter (none) Return Kintone Error Response Sample code Get app with error response Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Response { \"message\":\"{kintone_error_message}\", \"id\":\"kintone_error_id\", \"code\":\"{kintone_error_code}\" } // In the some case, the kintone Rest API will response with detail errors { \"message\":\"{kintone_error_message}\", \"id\":\"kintone_error_id\", \"code\":\"{kintone_error_code}\", \"errors\": [ /*errors items here*/ ] } getAll() Parameter (none) Return The result of Promise.Reject() Sample code Get apps with error response Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getAll()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID) .catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getAll()); }); throw() This function will throw result of get() function Parameter (none) Return (none) throwAll() This function will throw result of getAll() function Parameter (none) Return (none) Reference kintone REST API Overview on developer network axios on npmjs","title":"Kintone APIException"},{"location":"reference/kintone-api-exception/#kintoneapiexception","text":"Handle error responses from kintone Rest API","title":"kintoneAPIException"},{"location":"reference/kintone-api-exception/#methods","text":"","title":"Methods"},{"location":"reference/kintone-api-exception/#get","text":"Parameter (none) Return Kintone Error Response Sample code Get app with error response Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Response { \"message\":\"{kintone_error_message}\", \"id\":\"kintone_error_id\", \"code\":\"{kintone_error_code}\" } // In the some case, the kintone Rest API will response with detail errors { \"message\":\"{kintone_error_message}\", \"id\":\"kintone_error_id\", \"code\":\"{kintone_error_code}\", \"errors\": [ /*errors items here*/ ] }","title":"get()"},{"location":"reference/kintone-api-exception/#getall","text":"Parameter (none) Return The result of Promise.Reject() Sample code Get apps with error response Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getAll()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID) .catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getAll()); });","title":"getAll()"},{"location":"reference/kintone-api-exception/#throw","text":"This function will throw result of get() function Parameter (none) Return (none)","title":"throw()"},{"location":"reference/kintone-api-exception/#throwall","text":"This function will throw result of getAll() function Parameter (none) Return (none)","title":"throwAll()"},{"location":"reference/kintone-api-exception/#reference","text":"kintone REST API Overview on developer network axios on npmjs","title":"Reference"},{"location":"reference/record/","text":"Record Provide manipulate functions on records: get, update, delete, update the record status assignees in the kintone app Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init record module Javascript var kintoneRecord = new kintoneJSSDK.Record(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneRecord = new kintone.Record(connection); Methods getRecord(app, id) Retrieves details of 1 record from an app. Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID in kintone app Return Promise Sample code Get record Javascript var app = {your_app_id}; var id = {your_record_id}; kintoneRecord.getRecord(app, id).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = {your_record_id}; kintoneRecord.getRecord(app, id).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getRecords(app, query, fields, totalCount) Retrieves details of multiple records from an app using a query string. Parameter Name Type Required Description app Integer yes The kintone app ID query String (optional) The query string that will specify what records will be responded. fields Array String> (optional) List of field codes you want in the response. totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise Sample code Get records Javascript var app = {your_app_id}; var query = '{your_query_string}'; var fields = [ '{your_field_code}', // another fieldCode ] var totalCount = {your_decide_true_or_false}; kintoneRecord.getRecords(app, query, fields, totalCount).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const query = '{your_query_string}'; const fields = [ '{your_field_code}', // another fieldCode ] const totalCount = /*{your_decide_true_or_false}*/; kintoneRecord.getRecords(app, query, fields, totalCount).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); addRecord(app, record) Add one record to an app. Parameter Name Type Required Description app Integer yes The kintone app ID record JSONObject (optional) The record data to be add to kintone app. About the format, please look the sample below or reference at the end of this page Return Promise Sample code Add record Javascript var app = 'your_app_id'; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; kintoneRecord.addRecord(app, record).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; kintoneRecord.addRecord(app, record).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); addRecords(app, records) Add multiple records to an app. Parameter Name Type Required Description app Integer yes The kintone app ID records Array JSONObject> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add multi records Javascript var app = {your_app_id}; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var records = [ record, // another record ]; kintoneRecord.addRecords(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addRecords(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateRecordByID(app, id, record, revision) Updates details of 1 record in an app by specifying its record number. Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID on kintone app record JSONObject yes The record data to be update in kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise Sample code Update record by ID Javascript var app = 'your_app_id'; var id = 'your_record_id'; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var revision = 'revision_of_record'; kintoneRecord.updateRecordById(app, id, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordById(app, id, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateRecordByUpdateKey(app, updateKey, record, revision) Updates details of 1 record in an app by unique key. Parameter Name Type Required Description app Integer yes The kintone app ID updateKey JSONObject yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. record JSONObject yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise Sample code Update record by UpdateKey Javascript var app = 'your_app_id'; var updateKey = { field: '{your_fieldcode}', value: '{your_fieldcode_value}' }; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var revision = 'revision_of_record'; kintoneRecord.updateRecordByUpdateKey(app, updateKey, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const updateKey = { field: '{your_fieldcode}', value: '{your_fieldcode_value}' }; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordByUpdateKey(app, updateKey, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateRecords(app, records) Updates details of multiple records in an app, by specifying their record number, or a different unique key. Parameter Name Type Required Description app Integer yes The kintone app ID records Array JSONObject> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Update multi records Javascript var app = 'your_app_id'; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var recordUpdate = { id: 'your_record_id', // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: '{your_field_code}', value: '{your_field_code_value}' }, record: record, revision: 'record_revision_number' // Optional }; var recordsUpdate = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords(app, recordsUpdate).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const recordUpdate = { id: /*{your_record_id}*/, // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: '{your_field_code}', value: '{your_field_code_value}' }, record: record, revision: /*{record_revision_number}*/ // Optional }; const recordsUpdate = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords(app, recordsUpdate).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); deleteRecords(app, ids) Deletes multiple records in an app. Parameter Name Type Required Description app Integer yes The kintone app ID ids Array Integer> yes The list ids of record will be delete. Return Promise Sample code Delete multi record Javascript var app = 'your_app_id'; var ids = [/*your_record_id*/] kintoneRecord.deleteRecords(app, ids).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const ids = [/*your_record_id*/] kintoneRecord.deleteRecords(app, ids).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); deleteRecordsWithRevision(app, idsWithRevision) Deletes multiple records in an app with revision. Parameter Name Type Required Description app Integer yes The kintone app ID idsWithRevision JSONObject yes JSONObject format by HashTable Integer , Integer > ( key : The Id of record , value : The Revision of record. ) Return Promise Sample code Delete record with revision Javascript var app = 'your_app_id'; var idsWithRevision = { /*your_record_id: revision_of_record*/ } kintoneRecord.deleteRecordsWithRevision(app, idsWithRevision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const idsWithRevision = { /*your_record_id: revision_of_record*/ } kintoneRecord.deleteRecordsWithRevision(app, idsWithRevision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateRecordAssignees(app, id, assignees, revision) Update assignees of a record. Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID of kintone app assignees Array String> yes The user code(s) of the assignee(s) revision Integer (option) The revision number of record Return Promise Sample code update record Assignees Javascript var app = 'your_app_id'; var id = 'your_record_id'; var assignees = [/*your_assignee(s)*/]; var revision = 'revision_of_record'; kintoneRecord.updateRecordAssignees(app, id, assignees, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const assignees = [/*your_assignee(s)*/]; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordAssignees(app, id, assignees, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateRecordStatus(app, id, action, assignee, revision) Updates the Status of a record of an app. Parameter Name Type Required Description app Integer yes The kintone app ID. id Integer yes The record ID on kintone app. action String yes The Action name will be run. assignee String (Conditionally required) The next Assignee. Specify the Assignee's log in name. Required, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. revision Integer (optional) The revision of record Return Promise Sample code Update record status Javascript var app = 'your_app_id'; var id = 'your_record_id'; var action = 'your_action_name'; var assignee = '/*your_assignee(s)*/'; var revision = 'revision_of_record'; kintoneRecord.updateRecordStatus(app, id, action, assignee, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const action = /*{your_action_name}*/; const assignee = '/*your_assignee(s)*/'; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordStatus(app, id, action, assignee, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); updateRecordsStatus(app, records) Updates the Status of multiple records of an app. Parameter Name Type Required Description app Integer yes The kintone app ID records Array JSONObject> yes The recod status data. See belowsample codee or reference at the end of this page to know format. Return Promise Sample code Update multi record status Javascript var app = 'your_app_id'; var recordStatusUpdateItem = { id: 'your_record_id', action: 'your_action_name', assignee: 'your_assignee', revision: 'your_record_revision' } var records = [ recordStatusUpdateItem, 'another data like recordStatusUpdateItem' ]; kintoneRecord.updateRecordsStatus(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const recordStatusUpdateItem = { id: /*your_record_id*/, action: '/*your_action_name*/', assignee: '/*your_assignee*/', revision: /*your_record_revision*/ } const records = [ recordStatusUpdateItem, /*another data like recordStatusUpdateItem*/ ]; kintoneRecord.updateRecordsStatus(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getComments(app, record, order, offset, limit) Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The ID of record order String (optional) The sort order of the Comment ID. Please select asc or desc offset Integer (optional) The number of first comments will be ignored. limit Integer (optional) The number of records to retrieve. Return Promise Sample code Get comments Javascript var app = 'your_app_id'; var id = 'your_record_id'; var order = 'your_order_type'; // asc or desc var offset = 'your_offset_number'; var limit = 'your_limit number'; kintoneRecord.getComments(app, id, order, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const order = /*{your_order_type}*/; // asc or desc const offset = /*{your_offset_number}*/; const limit = /*{your_limit number}*/; kintoneRecord.getComments(app, id, order, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); addComment(app, record, comment) Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The ID of record comment JSONObject yes About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add comment Javascript var app = 'your_app_id'; var record = 'your_record_id'; var comment = { text: '/*your_comment_content*/', mentions: [ { code: '/*your_member_code*/', type: '/*your_member_type*/' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = /*{your_record_id}*/; const comment = { text: '/*your_comment_content*/', mentions: [ { code: '/*your_member_code*/', type: '/*your_member_type*/' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); deleteComment(app, record, comment) Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The record ID on kintone app comment Integer yes The comment ID on kintone record Return Promise Sample code Delete comment Javascript var app = 'your_app_id'; var record = 'your_record_id'; var comment = 'your_comment_id'; kintoneRecord.deleteComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = /*{your_record_id}*/; const comment = /*{your_comment_id}*/; kintoneRecord.deleteComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Reference Get Record on developer network Add Record on developer network Update Record on developer network Delete Record on developer network Get Comments on developer network Add Comment on developer network Delete Comment on developer network Update Record Status on developer network Update Record Assignees on developer network","title":"Record"},{"location":"reference/record/#record","text":"Provide manipulate functions on records: get, update, delete, update the record status assignees in the kintone app","title":"Record"},{"location":"reference/record/#constructor","text":"Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init record module Javascript var kintoneRecord = new kintoneJSSDK.Record(connection); Nodejs const kintone = require('kintone-js-sdk'); let kintoneRecord = new kintone.Record(connection);","title":"Constructor"},{"location":"reference/record/#methods","text":"","title":"Methods"},{"location":"reference/record/#getrecordapp-id","text":"Retrieves details of 1 record from an app. Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID in kintone app Return Promise Sample code Get record Javascript var app = {your_app_id}; var id = {your_record_id}; kintoneRecord.getRecord(app, id).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = {your_record_id}; kintoneRecord.getRecord(app, id).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getRecord(app, id)"},{"location":"reference/record/#getrecordsapp-query-fields-totalcount","text":"Retrieves details of multiple records from an app using a query string. Parameter Name Type Required Description app Integer yes The kintone app ID query String (optional) The query string that will specify what records will be responded. fields Array String> (optional) List of field codes you want in the response. totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise Sample code Get records Javascript var app = {your_app_id}; var query = '{your_query_string}'; var fields = [ '{your_field_code}', // another fieldCode ] var totalCount = {your_decide_true_or_false}; kintoneRecord.getRecords(app, query, fields, totalCount).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const query = '{your_query_string}'; const fields = [ '{your_field_code}', // another fieldCode ] const totalCount = /*{your_decide_true_or_false}*/; kintoneRecord.getRecords(app, query, fields, totalCount).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getRecords(app, query, fields, totalCount)"},{"location":"reference/record/#addrecordapp-record","text":"Add one record to an app. Parameter Name Type Required Description app Integer yes The kintone app ID record JSONObject (optional) The record data to be add to kintone app. About the format, please look the sample below or reference at the end of this page Return Promise Sample code Add record Javascript var app = 'your_app_id'; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; kintoneRecord.addRecord(app, record).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; kintoneRecord.addRecord(app, record).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"addRecord(app, record)"},{"location":"reference/record/#addrecordsapp-records","text":"Add multiple records to an app. Parameter Name Type Required Description app Integer yes The kintone app ID records Array JSONObject> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add multi records Javascript var app = {your_app_id}; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var records = [ record, // another record ]; kintoneRecord.addRecords(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addRecords(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"addRecords(app, records)"},{"location":"reference/record/#updaterecordbyidapp-id-record-revision","text":"Updates details of 1 record in an app by specifying its record number. Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID on kintone app record JSONObject yes The record data to be update in kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise Sample code Update record by ID Javascript var app = 'your_app_id'; var id = 'your_record_id'; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var revision = 'revision_of_record'; kintoneRecord.updateRecordById(app, id, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordById(app, id, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateRecordByID(app, id, record, revision)"},{"location":"reference/record/#updaterecordbyupdatekeyapp-updatekey-record-revision","text":"Updates details of 1 record in an app by unique key. Parameter Name Type Required Description app Integer yes The kintone app ID updateKey JSONObject yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. record JSONObject yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise Sample code Update record by UpdateKey Javascript var app = 'your_app_id'; var updateKey = { field: '{your_fieldcode}', value: '{your_fieldcode_value}' }; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var revision = 'revision_of_record'; kintoneRecord.updateRecordByUpdateKey(app, updateKey, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const updateKey = { field: '{your_fieldcode}', value: '{your_fieldcode_value}' }; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordByUpdateKey(app, updateKey, record, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateRecordByUpdateKey(app, updateKey, record, revision)"},{"location":"reference/record/#updaterecordsapp-records","text":"Updates details of multiple records in an app, by specifying their record number, or a different unique key. Parameter Name Type Required Description app Integer yes The kintone app ID records Array JSONObject> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Update multi records Javascript var app = 'your_app_id'; var record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; var recordUpdate = { id: 'your_record_id', // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: '{your_field_code}', value: '{your_field_code_value}' }, record: record, revision: 'record_revision_number' // Optional }; var recordsUpdate = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords(app, recordsUpdate).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const recordUpdate = { id: /*{your_record_id}*/, // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: '{your_field_code}', value: '{your_field_code_value}' }, record: record, revision: /*{record_revision_number}*/ // Optional }; const recordsUpdate = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords(app, recordsUpdate).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateRecords(app, records)"},{"location":"reference/record/#deleterecordsapp-ids","text":"Deletes multiple records in an app. Parameter Name Type Required Description app Integer yes The kintone app ID ids Array Integer> yes The list ids of record will be delete. Return Promise Sample code Delete multi record Javascript var app = 'your_app_id'; var ids = [/*your_record_id*/] kintoneRecord.deleteRecords(app, ids).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const ids = [/*your_record_id*/] kintoneRecord.deleteRecords(app, ids).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"deleteRecords(app, ids)"},{"location":"reference/record/#deleterecordswithrevisionapp-idswithrevision","text":"Deletes multiple records in an app with revision. Parameter Name Type Required Description app Integer yes The kintone app ID idsWithRevision JSONObject yes JSONObject format by HashTable Integer , Integer > ( key : The Id of record , value : The Revision of record. ) Return Promise Sample code Delete record with revision Javascript var app = 'your_app_id'; var idsWithRevision = { /*your_record_id: revision_of_record*/ } kintoneRecord.deleteRecordsWithRevision(app, idsWithRevision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const idsWithRevision = { /*your_record_id: revision_of_record*/ } kintoneRecord.deleteRecordsWithRevision(app, idsWithRevision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"deleteRecordsWithRevision(app, idsWithRevision)"},{"location":"reference/record/#updaterecordassigneesapp-id-assignees-revision","text":"Update assignees of a record. Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID of kintone app assignees Array String> yes The user code(s) of the assignee(s) revision Integer (option) The revision number of record Return Promise Sample code update record Assignees Javascript var app = 'your_app_id'; var id = 'your_record_id'; var assignees = [/*your_assignee(s)*/]; var revision = 'revision_of_record'; kintoneRecord.updateRecordAssignees(app, id, assignees, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const assignees = [/*your_assignee(s)*/]; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordAssignees(app, id, assignees, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateRecordAssignees(app, id, assignees, revision)"},{"location":"reference/record/#updaterecordstatusapp-id-action-assignee-revision","text":"Updates the Status of a record of an app. Parameter Name Type Required Description app Integer yes The kintone app ID. id Integer yes The record ID on kintone app. action String yes The Action name will be run. assignee String (Conditionally required) The next Assignee. Specify the Assignee's log in name. Required, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. revision Integer (optional) The revision of record Return Promise Sample code Update record status Javascript var app = 'your_app_id'; var id = 'your_record_id'; var action = 'your_action_name'; var assignee = '/*your_assignee(s)*/'; var revision = 'revision_of_record'; kintoneRecord.updateRecordStatus(app, id, action, assignee, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const action = /*{your_action_name}*/; const assignee = '/*your_assignee(s)*/'; const revision = /*{revision_of_record}*/; kintoneRecord.updateRecordStatus(app, id, action, assignee, revision).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateRecordStatus(app, id, action, assignee, revision)"},{"location":"reference/record/#updaterecordsstatusapp-records","text":"Updates the Status of multiple records of an app. Parameter Name Type Required Description app Integer yes The kintone app ID records Array JSONObject> yes The recod status data. See belowsample codee or reference at the end of this page to know format. Return Promise Sample code Update multi record status Javascript var app = 'your_app_id'; var recordStatusUpdateItem = { id: 'your_record_id', action: 'your_action_name', assignee: 'your_assignee', revision: 'your_record_revision' } var records = [ recordStatusUpdateItem, 'another data like recordStatusUpdateItem' ]; kintoneRecord.updateRecordsStatus(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const recordStatusUpdateItem = { id: /*your_record_id*/, action: '/*your_action_name*/', assignee: '/*your_assignee*/', revision: /*your_record_revision*/ } const records = [ recordStatusUpdateItem, /*another data like recordStatusUpdateItem*/ ]; kintoneRecord.updateRecordsStatus(app, records).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"updateRecordsStatus(app, records)"},{"location":"reference/record/#getcommentsapp-record-order-offset-limit","text":"Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The ID of record order String (optional) The sort order of the Comment ID. Please select asc or desc offset Integer (optional) The number of first comments will be ignored. limit Integer (optional) The number of records to retrieve. Return Promise Sample code Get comments Javascript var app = 'your_app_id'; var id = 'your_record_id'; var order = 'your_order_type'; // asc or desc var offset = 'your_offset_number'; var limit = 'your_limit number'; kintoneRecord.getComments(app, id, order, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const id = /*{your_record_id}*/; const order = /*{your_order_type}*/; // asc or desc const offset = /*{your_offset_number}*/; const limit = /*{your_limit number}*/; kintoneRecord.getComments(app, id, order, offset, limit).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"getComments(app, record, order, offset, limit)"},{"location":"reference/record/#addcommentapp-record-comment","text":"Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The ID of record comment JSONObject yes About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add comment Javascript var app = 'your_app_id'; var record = 'your_record_id'; var comment = { text: '/*your_comment_content*/', mentions: [ { code: '/*your_member_code*/', type: '/*your_member_type*/' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = /*{your_record_id}*/; const comment = { text: '/*your_comment_content*/', mentions: [ { code: '/*your_member_code*/', type: '/*your_member_type*/' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"addComment(app, record, comment)"},{"location":"reference/record/#deletecommentapp-record-comment","text":"Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The record ID on kintone app comment Integer yes The comment ID on kintone record Return Promise Sample code Delete comment Javascript var app = 'your_app_id'; var record = 'your_record_id'; var comment = 'your_comment_id'; kintoneRecord.deleteComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs const app = /*{your_app_id}*/; const record = /*{your_record_id}*/; const comment = /*{your_comment_id}*/; kintoneRecord.deleteComment(app, record, comment).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"deleteComment(app, record, comment)"},{"location":"reference/record/#reference","text":"Get Record on developer network Add Record on developer network Update Record on developer network Delete Record on developer network Get Comments on developer network Add Comment on developer network Delete Comment on developer network Update Record Status on developer network Update Record Assignees on developer network","title":"Reference"}]}